/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.kernel.async;

import sirius.kernel.commons.Tuple;

import java.util.List;

/**
 * Represents a state of execution, which is kind of an extended <tt>stack trace</tt>.
 * <p>
 * In particular, it combines the <tt>stack trace</tt> of the current thread with
 * its <tt>MDC</tt> ({@link CallContext#getMDC()}). And therefore provides a good insight
 * on what was happening at the given point in time.
 * <p>
 * A readable representation can be generated by calling {@link #toString()}
 */
public class ExecutionPoint {

    private String threadName;
    private StackTraceElement[] stacktrace;
    private List<Tuple<String, String>> mdc;

    /*
     * Use the static factory method snapshot()
     */
    private ExecutionPoint() {
    }

    /**
     * Generates a new instance of the current thread.
     *
     * @return a new instance representing the current state of the current thread
     */
    public static ExecutionPoint snapshot() {
        ExecutionPoint result = new ExecutionPoint();
        result.threadName = Thread.currentThread().getName();
        result.stacktrace = Thread.currentThread().getStackTrace();
        result.mdc = CallContext.getCurrent().getMDC();

        return result;
    }

    @Override
    public String toString() {
        StringBuilder msg = new StringBuilder();
        msg.append("Execution Point in: ");
        msg.append(threadName);
        msg.append("\n---------------------------------------------------\n");
        for (StackTraceElement e : stacktrace) {
            msg.append(e.getClassName())
               .append(".")
               .append(e.getMethodName())
               .append(" (")
               .append(e.getFileName())
               .append(":")
               .append(e.getLineNumber())
               .append(")\n");
        }
        msg.append("\n---------------------------------------------------\n");
        for (Tuple<String, String> t : mdc) {
            msg.append(t.getFirst()).append(": ").append(t.getSecond()).append("\n");
        }
        msg.append("\n---------------------------------------------------");

        return msg.toString();
    }
}
